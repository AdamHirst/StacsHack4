<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>GoHack | Hackthon travel planner</title>
    <link rel="stylesheet" href="css/bulma.css" />
    <link rel="stylesheet" href="css/bulma.css.map" />
    <link rel="stylesheet" href="css/style.css" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://fonts.googleapis.com/css?family=Titillium+Web" rel="stylesheet">
    <link href='https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css' rel='stylesheet' />
</head>
<body>
    <div id="main-map"></div>
    
    <div class="gh-logo-overlay" style="z-index: -50; position: fixed;right: 20px;top: 20px;height: 100px;width: 180px;display: block;">
    <img src="/img/logo.png">
    </div>

    <div id="gh-over">
        <header>
            <div class="hero is-bold is-medium gh-hero">
                <div class="gh-hero-background">
                    <div id="map"></div>
                </div>
                <div class="hero-body gh-hero-foreground has-text-centered">
                    <img src="img/logo.png" class="gh-logo-hero" />
                    <h3>Hackthon travel planner</h3>
    
                    <div class="field">
                        <div class="control gh-loc-control">
                            <input id="location-input" class="input gh-loc-input" type="text" placeholder="Enter your location">
                        </div>
                    </div>
                </div>
            </div>
        </header>
    
        <div class="section gh-branding gh-section-results has-text-centered">
            <div class="container">
                <img src="/img/skyscanner.png" style="height: 96px;">
            </div>
        </div>
    
        <div class="container">
            <div id="gh-card-container" class="gh-card-container">
                
            </div>
        </div>
    </div>

    <div id="gh-overlay-card" class="gh-card">
        
    </div>

    <a class="button is-info gh-back">&lt; Back to results</a>

    <div id="gh-overlay-prices" class="gh-card" style="position: fixed;left: 10px;top: 396px;height: 384px;width: 309.109px;">
        <ul id="gh-quotes" style="overflow-y: scroll; height: 384px">
        </ul>
    </div>
    

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyANNoWpcaXbtXtxCOs5g0RSQfZpRqygsfw&libraries=places"></script>
    <script src='https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.js'></script>
    <script src='https://api.mapbox.com/mapbox.js/plugins/arc.js/v0.1.0/arc.js'></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js"></script>
    <script src='/js/gohack.js'></script>
    <script>
    function getArc(lat1, lon1, lat2, lon2) {
        var start = { x: lat1, y: lon1 };
        var end = { x: lat2, y: lon2 };
        var generator = new arc.GreatCircle(start, end, {'name': 'ArcGen'});
        var line = generator.Arc(100,{offset:10});
        return line;
    }

        // Mapbox
        mapboxgl.accessToken = 'pk.eyJ1Ijoib3JrYW5uYSIsImEiOiJjaWsydDI4c3MwMzBteDRtNTJxZDB0ZWZwIn0.nM8qc55baG5ZVcZgZKJ_Fg';
        var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/orkanna/cjfpjff7r0gpg2sll20wlc7p4'
        });

        var mainMap = new mapboxgl.Map({
        container: 'main-map',
        style: 'mapbox://styles/orkanna/cjfpjff7r0gpg2sll20wlc7p4',
        center: [4.383331812371239, 50.049033832079914],
        zoom: 4
        });

        var pairs = [];
        
        var market = "";
        var geoString = "EDI";
        var rawLocations = [];

        var operators = {};
        var places = {};
        var resetTime = false;
        var perfAnim = false;
        var latitude = 0;
        var longitude = 0;

        var geojson_markers = {
            "type": "FeatureCollection",
            "features": []
        };

        var geojson = {
            "type": "FeatureCollection",
            "features": []
        };

        function addGeoJsonFeature(image, latlng, id) {
            geojson_markers.features.push({
                "type": "Feature",
                "properties": {
                    "image": image,
                    "iconSize": [40, 40],
                    "gh-id": id
                },
                "geometry": {
                    "type": "Point",
                    "coordinates": [
                        latlng.longitude, latlng.latitude
                    ]
                }
            });
        }
        mainMap.on('load', function() {
            mainMap.addLayer({
                'id': 'line-animation',
                'type': 'line',
                'source': {
                    'type': 'geojson',
                    'data': geojson
                },
                'layout': {
                    'line-cap': 'round',
                    'line-join': 'round'
                },
                'paint': {
                    'line-color': '#009CE0',
                    'line-width': 4,
                    'line-opacity': .8
                }
            });
        });

        var updatePrices = () => {
            // Set all buttons up
            $('.gh-price').addClass('is-loading');
            $('.gh-price').html('Loading');
            $('.gh-price').attr("disabled", false);

            // Update the prices
            function getNext(i) {
                if (i >= rawLocations.length) return;
                var dayStart = rawLocations[i].start_date.day;
                var dayEnd = rawLocations[i].end_date.day;
                if (dayStart.length == 1) dayStart = '0' + dayStart;
			    if (dayEnd.length == 1) dayEnd = '0' + dayEnd;

                var outboundDate = rawLocations[i].start_date.year + '-' + rawLocations[i].start_date.month + '-' + dayStart;
                var inboundDate = rawLocations[i].end_date.year + '-' + rawLocations[i].end_date.month + '-' + dayEnd;
                
                getQuotes(market, geoString, rawLocations[i].geoString, outboundDate, inboundDate, (raw) => {
                    var json = JSON.parse(raw);
                    // Parse carriers and places
                    json.Places.forEach(function(place) {
                        places[place.PlaceId] = place.Name;
                    });

                    json.Carriers.forEach(function(carrier) {
                        operators[carrier.CarrierId] = carrier.Name;
                    });
                    
                    $('#gh-price-button-' + i).removeClass('is-loading');
                    rawLocations[i].quotes = json.Quotes;
                    var minprice = Infinity;
                    for (var j = 0; j < json.Quotes.length; j++) {
                        if (json.Quotes[j].MinPrice < minprice) minprice = json.Quotes[j].MinPrice;
                    }
                    if (minprice == Infinity) {
                        $('#gh-price-button-' + i).html('No flights found :\'(');
                        $('#gh-price-button-' + i).removeClass('is-info');
                        $('#gh-price-button-' + i).addClass('is-danger');
                        $('#gh-price-button-' + i).attr('disabled', true);
                    } else {
                        $('#gh-price-button-' + i).html('Fly from Â£' + minprice);
                    }
                    
                    getNext(i + 1);
                });
            }
            getNext(0);
        };

        var lineStatus = 0;

        var activeLine;

function animateLine() {
    if (!perfAnim) return;

    if (lineStatus > 3*activeLine.geometries[0].coords.length) {
        lineStatus = 0;
    }

    if (geojson.features.length == 0) {
        geojson.features.push({
            "type": "Feature",
            "geometry": {
                "type": "LineString",
                "properties": {
                    "name": activeLine.properties.name
                },
                "coordinates": [
                    [activeLine.geometries[0].coords[0][1], activeLine.geometries[0].coords[0][0]]
                ]
            }
        });
    }
    
    if (lineStatus >= 2*activeLine.geometries[0].coords.length) {
        geojson.features[0].geometry.coordinates = geojson.features[0].geometry.coordinates.slice(1)
    } else if (lineStatus < activeLine.geometries[0].coords.length) {
        var x = activeLine.geometries[0].coords[lineStatus][0];
        var y = activeLine.geometries[0].coords[lineStatus][1];
        geojson.features[0].geometry.coordinates.push([y, x]); 
    }

    mainMap.getSource('line-animation').setData(geojson);

    setTimeout(() => { animateLine(); }, 10);
    lineStatus += 1;
}

function runAnimation() {
    if (!perfAnim) {
        perfAnim = true;
        animateLine();
    }
}

        // Google GeoLocation setup
        var input = document.getElementById('location-input');
        autocomplete = new google.maps.places.Autocomplete(input);
        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            latitude = place.geometry.location.lat();
            longitude = place.geometry.location.lng();
            
            map.flyTo({center: [longitude, latitude], zoom: 9});

            // Get the country code
            var country = "";
            place.address_components.forEach(element => {
                if (element.types.includes("country")) {
                    country = element.short_name;
                }
            });
            if (country === "" || country === "GB") country = "UK"; // Just incase demo goes bad!
            market = country;

            getGeoString(country, place.name, geoString => {
                geoString = geoString;
                if (geoString == "" || geoString == "{}") geoString = "EDI"; 
                updatePrices();
            });
        });



        function getDateStr(num) {
            switch (num) {
                case '01': return 'January';
                case '02': return 'Febuary';
                case '03': return 'March';
                case '04': return 'April';
                case '05': return 'May';
                case '06': return 'June';
                case '07': return 'July';
                case '08': return 'August';
                case '09': return 'September';
                case '10': return 'October';
                case '11': return 'November';
                case '12': return 'December';
            }
        }
    
        function getHackathonTemplate(hackathon) {
            if (hackathon.address_local === undefined || hackathon.address_region === undefined) {
                var location = "See event details"
            } else {
                var location = `${hackathon.address_local}, ${hackathon.address_region}`
            }

            if (hackathon.start_date.day === hackathon.end_date.day) {
                var date = `${hackathon.start_date.day} ${getDateStr(hackathon.start_date.month)} ${hackathon.start_date.year}`
            } else {
                var date = `${hackathon.start_date.day}-${hackathon.end_date.day} ${getDateStr(hackathon.start_date.month)} ${hackathon.start_date.year}`
            }

            return `<div id="gh-card-${hackathon.id}" class="gh-card">
                <div class="gh-card-hero" style="background-image: url('${hackathon.splash}')"></div>
                <div class="gh-card-logo" style="background-image: url('${hackathon.logo}')"></div>
                <div class="gh-card-title">${hackathon.title}</div>
                <div class="gh-card-location">${location}</div>
                <div class="gh-card-date"> ${date}</div>
                <div class="gh-card-price"><a class="button is-info is-rounded gh-price" id="gh-price-button-${hackathon.id}" onclick='return openMapWithButton(${hackathon.id});' disabled>Enter your location for price</a></div>
            </div>`;
        }

        function getFlightTemplate(flight) {
            return `<li class="gh-flight" style="
    border-bottom: #eee 2px solid;
    padding: 20px;
    text-align: left;
    padding-right: 10px;
">
    <div class="gh-flight-info" style="display: inline-block">
        
    <div class="gh-flight-fromto">${places[flight.OutboundLeg.OriginId]} - ${places[flight.OutboundLeg.DestinationId]}</div>
    <div class="gh-flight-operator" style="
    font-size: 14px;
">${operators[flight.OutboundLeg.CarrierIds[0]]}</div>
    <div class="gh-flight-date" style="
    display: inline-block;
    font-size: 12px;
    /* margin-top: -11px; */
">${new Date(flight.OutboundLeg.DepartureDate).toDateString()}</div>

    </div>
    <div class="gh-flight-price" style="float: right;"><a class="button is-info is-rounded">Â£${flight.MinPrice}</a></div>
</li>`;
        }

        function refferToSkyscanner(hackathon) {
            var dayStart = rawLocations[hackathon].start_date.day;
            var dayEnd = rawLocations[hackathon].end_date.day;
            if (dayStart.length == 1) dayStart = '0' + dayStart;
            if (dayEnd.length == 1) dayEnd = '0' + dayEnd;

            var outboundDate = rawLocations[hackathon].start_date.year + '-' + rawLocations[hackathon].start_date.month + '-' + dayStart;
            var inboundDate = rawLocations[hackathon].end_date.year + '-' + rawLocations[hackathon].end_date.month + '-' + dayEnd;
            
            getReferralLink(market, geoString, rawLocations[hackathon].geoString, outboundDate, inboundDate).then(function(link) {
                window.location.href = link;
            });
        }

        function openMapWithButton(hackathon) {
            if ($("#gh-price-button-" + hackathon).attr('disabled') == undefined) {
                transitionToMap(hackathon, $('#gh-card-' + hackathon));
            
                var el = $("#gh-quotes");
                el.html('');
                
                if (rawLocations[hackathon].location) {
                    var loc = rawLocations[hackathon].location;
                    activeLine = getArc(latitude, longitude, loc.latitude, loc.longitude);
                    geojson.features = [];
                    runAnimation();
                    $("#gh-id-" + hackathon).css('border-color', '#009CE0');
                }
            // // Pressed da button and already in map view???
            // if (window.location.hash == "#map") {
            //     // Ayy
            //     console.log("going...")
            //     getReferralLink(market, geoString, rawLocations[hackathon].geoString, outboundDate, inboundDate).then(function(link) {
            //         window.location.href = link; // Redirect
            //         console.log(" gone")
            //     });
            // }

            // // fuck it we're map view now
            // window.location.hash = "map"

            var el = $("#gh-quotes");
            el.html('');

                rawLocations[hackathon].quotes.forEach(function(quote) {
                    el.append(getFlightTemplate(quote));
                });
            }
        }

        var selected = 0;

        function updateMarkers() {
            geojson_markers.features.forEach(marker => {
                var el = document.createElement('div');
                el.className = "gh-marker"
                
                var img = marker.properties.image;
                el.style.backgroundImage = `url(${img})`;
                el.style.width = marker.properties.iconSize[0] + 'px';
                el.style.height = marker.properties.iconSize[1] + 'px';
                el.id = 'gh-id-' + marker.properties['gh-id'];

                new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).addTo(mainMap);
            
                $('#gh-id-' + marker.properties['gh-id']).click(() => {
                    $('#gh-id-' + selected).css('border-color', '#FFFFFF');
                    $('#gh-id-' + marker.properties['gh-id']).css('border-color', '#009CE0');
                    selected = marker.properties['gh-id'];
                    $('#gh-overlay-card').html($("#gh-card-" + marker.properties['gh-id']).html());
                
                    var loc = rawLocations[marker.properties['gh-id']].location;
                    activeLine = getArc(latitude, longitude, loc.latitude, loc.longitude);
                    geojson.features = [];
                    var e2 = $("#gh-quotes");
                    e2.html('');

                    $('#gh-overlay-card').find('a').attr('onclick', 'refferToSkyscanner(' + marker.properties['gh-id'] + ')');
                    e2.find('a').attr('onclick', 'refferToSkyscanner(' + marker.properties['gh-id'] + ')');

                    
                    rawLocations[marker.properties['gh-id']].quotes.forEach(function(quote) {
                        e2.append(getFlightTemplate(quote));
                    });
                });
            });
        }

        function updateLocations(locations) {
            rawLocations = JSON.parse(locations).hackathons;
            var container = $('#gh-card-container');
            container.html('');
            for (var i = 0; i < rawLocations.length; i++) {
                rawLocations[i].id = i;
                
                if (!rawLocations[i].start_date) {
                    rawLocations[i].start_date = {
                        day: '17',
                        month: '05',
                        year: '2018'
                    }
                }
                if (!rawLocations[i].end_date) {
                    rawLocations[i].end_date = {
                        day: '20',
                        month: '05',
                        year: '2018'
                    }
                }
                if (!rawLocations[i].geoString) {
                    rawLocations[i].geoString = "PARI-sky"
                }
                container.append(getHackathonTemplate(rawLocations[i]));
                
                if (rawLocations[i].location != null) addGeoJsonFeature(rawLocations[i].logo, rawLocations[i].location, i);
            }

            updateMarkers();
        }

        mainMap.on('click', 'symbols', function (e) {
            map.flyTo({center: e.features[0].geometry.coordinates});
        });


        function transitionToMap(hackathon, element) {
            // Get element pos
            var rect = element[0].getBoundingClientRect();

            var nEl = $('#gh-overlay-card');

            element.css('visibility', 'hidden');

            nEl.html(element.html());

            nEl.find('a').attr('onclick', 'refferToSkyscanner(' + hackathon + ')');
            $("#gh-flight-price").find('a').attr('onclick', 'refferToSkyscanner(' + hackathon + ')');

            nEl.css('display', 'block');
            nEl.css('position', 'fixed');
            nEl.css('left', rect.left);
            nEl.css('top', rect.top);
            nEl.css('height', rect.height);
            nEl.css('width', rect.width);
            $('#gh-overlay-prices').css('width', rect.width);
            nEl.animate({
                left: 10,
                top: 0
            }, 1000, function() {
                element.css('visibility', 'visible');
                $('.gh-back').fadeIn();
                $('#gh-overlay-prices').fadeIn();
            });
            $('#gh-over').fadeOut();
        }

        function closeMap() {
            window.location.hash = ""

            var nEl = $('#gh-overlay-card');
            nEl.html('');
            nEl.css('display', 'none');
            $('#gh-over').fadeIn();
            $('.gh-back').fadeOut();
            $('#gh-overlay-prices').fadeOut();
        }

        $('.gh-back').click(closeMap);

        getLocations(updateLocations);
        
    </script>
    <script src="/js/flightpath.js"></script>
</body>
</html>